<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 이름이 target인 NewlecExam 빈 등록 -->
    <bean id="target" class="spring.aop.entity.NewlecExam" p:kor="1" p:eng="1" p:math="1" p:com="1"/>
   	<!-- LogAroundAdvice 빈 등록 : 로그 기록을 담당하는 어드바이스, 핸들러이다.-->
   	<bean id="logAroundAdvice" class="spring.aop.advice.LogAroundAdvice" />
   	<bean id="logBeforeAdvice" class="spring.aop.advice.LogBeforeAdvice" />
   	<bean id="logAfterRerturningAdvice" class="spring.aop.advice.LogAfterRerturningAdvice" />
   	<bean id="logAfterThrowingAdvice" class="spring.aop.advice.LogAfterThrowingAdvice" />
<!--<bean id="classicPointCut" class="org.springframework.aop.support.NameMatchMethodPointcut">
    	<property name="mappedName" value="total" />
    </bean>
	<bean id="classBeforeAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
    	<property name="advice" ref="logBeforeAdvice" />
    	<property name="pointcut" ref="classicPointCut" />
    </bean>
    <bean id="classAroundAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
    	<property name="advice" ref="logAroundAdvice" />
    	<property name="pointcut" ref="classicPointCut" />
    </bean> -->
    <!-- 위 방법보다 간단한 Advisor -->
<!--<bean id="classBeforeAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
    	<property name="advice" ref="logBeforeAdvice" />
    	<property name="mappedNames">
    		<list>
    			<value>total</value>
    			<value>avg</value>
    		</list>
    	</property>
    </bean>-->
   	<bean id="classBeforeAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    	<property name="advice" ref="logBeforeAdvice" />
    	<property name="patterns">
    		<list>
    			<value>.*to.*</value>
    		</list>
    	</property>
    </bean>
    <bean id="classAroundAdvisor" class="org.springframework.aop.support.NameMatchMethodPointcutAdvisor">
    	<property name="advice" ref="logAroundAdvice" />
    	<property name="mappedName" value="total" />
    </bean> 
    <!-- 이름이 exam인 ProxyFactoryBean 빈 등록 -> proxy 생성 -->
    <bean id="exam" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<!-- proxy는 2가지를 설정해야 한다. -->
    	<!-- 1.실제 NewlecExam객체 즉 타겟에 해당되는 클래스로더 -->
    	<!-- name="target"은 setTarget() 호출, set은 빼고 t는 소문자로 바꾼 형식을 사용한다.-->
    	<property name="target" ref="target" />
    	<!-- 2.핸들러 -->
    	<property name="interceptorNames">
    		<!-- interceptorNames:복수형 답게 리스트를 사용해 여러개 넣어줄 수 있다 -->
    		<list>
    			<!-- value에 참조하고 있는 핸들러의 이름을 넣어준다. -->
    			<value>classAroundAdvisor</value>
    			<value>classBeforeAdvisor</value>
    			<value>logAfterRerturningAdvice</value>
    			<value>logAfterThrowingAdvice</value>
    		</list>
    	</property>
    </bean>
</beans>
